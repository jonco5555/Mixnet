# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""

import grpc

import mixnet.mixnet_pb2 as mixnet__pb2

GRPC_GENERATED_VERSION = "1.73.0"
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower

    _version_not_supported = first_version_is_lower(
        GRPC_VERSION, GRPC_GENERATED_VERSION
    )
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    raise RuntimeError(
        f"The grpc package installed is at version {GRPC_VERSION},"
        + " but the generated code in mixnet_pb2_grpc.py depends on"
        + f" grpcio>={GRPC_GENERATED_VERSION}."
        + f" Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}"
        + f" or downgrade your generated code using grpcio-tools<={GRPC_VERSION}."
    )


class MixServerStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.ForwardMessage = channel.unary_unary(
            "/mixnet.MixServer/ForwardMessage",
            request_serializer=mixnet__pb2.ForwardMessageRequest.SerializeToString,
            response_deserializer=mixnet__pb2.ForwardMessageResponse.FromString,
            _registered_method=True,
        )
        self.PollMessages = channel.unary_unary(
            "/mixnet.MixServer/PollMessages",
            request_serializer=mixnet__pb2.PollMessagesRequest.SerializeToString,
            response_deserializer=mixnet__pb2.PollMessagesResponse.FromString,
            _registered_method=True,
        )
        self.Register = channel.unary_unary(
            "/mixnet.MixServer/Register",
            request_serializer=mixnet__pb2.RegisterRequest.SerializeToString,
            response_deserializer=mixnet__pb2.RegisterResponse.FromString,
            _registered_method=True,
        )
        self.WaitForStart = channel.unary_unary(
            "/mixnet.MixServer/WaitForStart",
            request_serializer=mixnet__pb2.WaitForStartRequest.SerializeToString,
            response_deserializer=mixnet__pb2.WaitForStartResponse.FromString,
            _registered_method=True,
        )


class MixServerServicer(object):
    """Missing associated documentation comment in .proto file."""

    def ForwardMessage(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def PollMessages(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def Register(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def WaitForStart(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")


def add_MixServerServicer_to_server(servicer, server):
    rpc_method_handlers = {
        "ForwardMessage": grpc.unary_unary_rpc_method_handler(
            servicer.ForwardMessage,
            request_deserializer=mixnet__pb2.ForwardMessageRequest.FromString,
            response_serializer=mixnet__pb2.ForwardMessageResponse.SerializeToString,
        ),
        "PollMessages": grpc.unary_unary_rpc_method_handler(
            servicer.PollMessages,
            request_deserializer=mixnet__pb2.PollMessagesRequest.FromString,
            response_serializer=mixnet__pb2.PollMessagesResponse.SerializeToString,
        ),
        "Register": grpc.unary_unary_rpc_method_handler(
            servicer.Register,
            request_deserializer=mixnet__pb2.RegisterRequest.FromString,
            response_serializer=mixnet__pb2.RegisterResponse.SerializeToString,
        ),
        "WaitForStart": grpc.unary_unary_rpc_method_handler(
            servicer.WaitForStart,
            request_deserializer=mixnet__pb2.WaitForStartRequest.FromString,
            response_serializer=mixnet__pb2.WaitForStartResponse.SerializeToString,
        ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
        "mixnet.MixServer", rpc_method_handlers
    )
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers("mixnet.MixServer", rpc_method_handlers)


# This class is part of an EXPERIMENTAL API.
class MixServer(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def ForwardMessage(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/mixnet.MixServer/ForwardMessage",
            mixnet__pb2.ForwardMessageRequest.SerializeToString,
            mixnet__pb2.ForwardMessageResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True,
        )

    @staticmethod
    def PollMessages(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/mixnet.MixServer/PollMessages",
            mixnet__pb2.PollMessagesRequest.SerializeToString,
            mixnet__pb2.PollMessagesResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True,
        )

    @staticmethod
    def Register(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/mixnet.MixServer/Register",
            mixnet__pb2.RegisterRequest.SerializeToString,
            mixnet__pb2.RegisterResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True,
        )

    @staticmethod
    def WaitForStart(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/mixnet.MixServer/WaitForStart",
            mixnet__pb2.WaitForStartRequest.SerializeToString,
            mixnet__pb2.WaitForStartResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True,
        )


class ClientStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.PrepareMessage = channel.unary_unary(
            "/mixnet.Client/PrepareMessage",
            request_serializer=mixnet__pb2.PrepareMessageRequest.SerializeToString,
            response_deserializer=mixnet__pb2.PrepareMessageResponse.FromString,
            _registered_method=True,
        )


class ClientServicer(object):
    """Missing associated documentation comment in .proto file."""

    def PrepareMessage(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")


def add_ClientServicer_to_server(servicer, server):
    rpc_method_handlers = {
        "PrepareMessage": grpc.unary_unary_rpc_method_handler(
            servicer.PrepareMessage,
            request_deserializer=mixnet__pb2.PrepareMessageRequest.FromString,
            response_serializer=mixnet__pb2.PrepareMessageResponse.SerializeToString,
        ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
        "mixnet.Client", rpc_method_handlers
    )
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers("mixnet.Client", rpc_method_handlers)


# This class is part of an EXPERIMENTAL API.
class Client(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def PrepareMessage(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/mixnet.Client/PrepareMessage",
            mixnet__pb2.PrepareMessageRequest.SerializeToString,
            mixnet__pb2.PrepareMessageResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True,
        )
